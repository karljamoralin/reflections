When I initialize a repository, a GIT directory is created. It looks like it contains the configurations necessary to run a GIT repository. If you don't do git init, your directory won't be a git repository, just a normal directory.

The staging area is like your shopping cart -- you add files you like to commit but you'll have a chance to review them before actually committing them to the repository. 

The staging area is useful in a sense that if you made changes in multiple files, you can add one at a staging area, then commit it before repeating the process to each one of the files. That way you'll have a separate commit for each changes you did in multiple files.

Branches are useful if you want to keep 'parallel universes' of your code -- that is you want several features that should not yet be present in the master or to other branches to develop and have its own history. That way you can manage them separately and not have one complex code containing everything.

Drawing diagrams of all the commits and branches lets you see in a glance how far is your code branching, which gives you an idea how many separate features are being worked on, needs to be merged, or are unreachable.

Merging two branches will result to having both changes combined into one file. I'm still not 100% clear on how the merging works, how it resolves conflicts and dependencies, but I guess I'll learn its mechanics once I'm actually using it. 

With automatic merging, you don't have to worry about manually checking conflicts, which can save time. However, you run the risk of having erroneous merges as Git will not take into account semantic differences when merging code. In manual merging, it's more flexible and accurate but is more time-consuming as you have to review the merges.